import os

OUTPUT_HEADER_NAME = "cfetch.h"
SRC_DIR = os.path.join(os.getcwd(), "src")
OUTPUT_DIR = os.path.join(os.getcwd(), "dist")

COPYRIGHT_DISCLAIMER = """
/*
    This file is part of cfetch.
    Original author: Arikatsu
    License: MIT
    Repository: https://github.com/Arikatsu/cfetch

    This header file was generated by "create_header.py" script in cfetch/scripts.
    Feel free to modify this file as you wish but please keep the disclaimer above.
*/

"""

extracted_macros = set()
extracted_includes = set()
extracted_functions = set()

def extract_preprocessor_directives(file_path):
    with open(file_path, "r") as f:
        for line in f:
            if line.startswith("#define") and not line.endswith("_H\n"):
                extracted_macros.add(line)
            elif (line.startswith("#include") and line.find("<") != -1) or line.startswith("#pragma"):
                extracted_includes.add(line)

def extract_functions(file_path):
    with open(file_path, "r") as f:
        for line in f:
            if line.endswith(";\n") and line.find("(") != -1 and line.find(")") != -1:
                extracted_functions.add(line)

def create_header():
    header_file = os.path.join(OUTPUT_DIR, OUTPUT_HEADER_NAME)
    with open(header_file, "w") as f:
        f.write(COPYRIGHT_DISCLAIMER)
        f.write("#pragma once\n\n")

        for include in extracted_includes:
            f.write(include)

        f.write("\n")

        for macro in extracted_macros:
            f.write(macro)

        f.write("\n")

        with open(f"{SRC_DIR}/types.h", "r") as types_h:
            for line in types_h:
                if not line.startswith("#"):
                    f.write(line)

        for function in extracted_functions:
            f.write(function)
            f.write("\n")

        f.write("\n")

        for root, _, files in os.walk(SRC_DIR):
            for file in files:
                if file.endswith(".c") and not file.endswith("main.c"):
                    file_path = os.path.join(root, file)
                    with open(file_path, "r") as c_file:
                        for line in c_file:
                            if not line.startswith("#include"):
                                f.write(line)

def main():
    for root, _, files in os.walk(SRC_DIR):
        for file in files:
            if file.endswith(".h"):
                file_path = os.path.join(root, file)
                extract_preprocessor_directives(file_path)
                extract_functions(file_path)

    create_header()

if __name__ == "__main__":
    main()